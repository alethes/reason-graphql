// Generated by BUCKLESCRIPT VERSION 4.0.5, PLEASE EDIT WITH CARE
'use strict';

var Block = require("bs-platform/lib/js/block.js");
var Curry = require("bs-platform/lib/js/curry.js");
var $$String = require("bs-platform/lib/js/string.js");
var Belt_List = require("bs-platform/lib/js/belt_List.js");
var Pervasives = require("bs-platform/lib/js/pervasives.js");
var Ast$ReasonGraphqlServer = require("./Ast.bs.js");

function join(list, seperator) {
  return $$String.concat(seperator, Belt_List.keep(list, (function (x) {
                    return x !== "";
                  })));
}

function wrap(left, str, right) {
  var match = str === "";
  if (match) {
    return "";
  } else {
    return left + (str + right);
  }
}

function indent(str) {
  if (str === "") {
    return "";
  } else {
    return "  " + str.replace((/\n/g), "\n  ");
  }
}

function block(list) {
  if (list) {
    return "{\n" + (indent(join(list, "\n")) + "\n}");
  } else {
    return "";
  }
}

function printValue(param) {
  if (typeof param === "number") {
    return "null";
  } else {
    switch (param.tag | 0) {
      case 0 : 
          return String(param[0]);
      case 1 : 
          return Pervasives.string_of_float(param[0]);
      case 2 : 
          return Pervasives.string_of_bool(param[0]);
      case 3 : 
      case 4 : 
          return param[0];
      case 5 : 
          return "[" + (join(Belt_List.map(param[0], printValue), ", ") + "]");
      case 6 : 
          return "{" + (printObjectFields(param[0]) + "}");
      case 7 : 
          return "$" + param[0];
      
    }
  }
}

function printObjectFields(fields) {
  return join(Belt_List.map(Curry._1(Ast$ReasonGraphqlServer.StringMap[/* bindings */16], fields), printObjectField), ", ");
}

function printObjectField(param) {
  return param[0] + (":" + printValue(param[1]));
}

function printType(param) {
  switch (param.tag | 0) {
    case 0 : 
        return param[0];
    case 1 : 
        return "[" + (printType(param[0]) + "]");
    case 2 : 
        return printType(param[0]) + "!";
    
  }
}

function printVariableDef($$var) {
  return printValue($$var[/* variable */0]);
}

function printVariables(vars) {
  return join(Belt_List.map(vars, (function (varDef) {
                    return printValue(varDef[/* variable */0]) + (": " + printType(varDef[/* typ */1]));
                  })), ", ");
}

function printArgument(arg) {
  return arg[/* name */0] + (": " + printValue(arg[/* value */1]));
}

function printArguments(args) {
  return join(Belt_List.map(args, printArgument), ", ");
}

function printDirective(param) {
  return "@" + (param[/* name */0] + wrap("(", printArguments(param[/* arguments */1]), ")"));
}

function printDirectives(directives) {
  return join(Belt_List.map(directives, printDirective), " ");
}

function printOpt(param) {
  if (param !== undefined) {
    return param;
  } else {
    return "";
  }
}

function printSelection(param) {
  switch (param.tag | 0) {
    case 0 : 
        return printField(param[0]);
    case 1 : 
        return printFragmentSpread(param[0]);
    case 2 : 
        return printInlineFragmentDefinition(param[0]);
    
  }
}

function printAlias(param) {
  if (param !== undefined) {
    return param + ": ";
  } else {
    return "";
  }
}

function printFragmentSpread(param) {
  return "..." + (param[/* name */0] + wrap(" ", printDirectives(param[/* directives */1]), ""));
}

function printInlineFragmentDefinition(param) {
  return join(/* :: */Block.simpleVariant("::", [
                "...",
                /* :: */Block.simpleVariant("::", [
                    wrap("on ", param[/* typeCondition */0], ""),
                    /* :: */Block.simpleVariant("::", [
                        printDirectives(param[/* directives */2]),
                        /* :: */Block.simpleVariant("::", [
                            block(Belt_List.map(param[/* selectionSet */1], printSelection)),
                            /* [] */0
                          ])
                      ])
                  ])
              ]), " ");
}

function printField(param) {
  return join(/* :: */Block.simpleVariant("::", [
                printAlias(param[/* alias */0]) + (param[/* name */1] + wrap("(", printArguments(param[/* arguments */2]), ")")),
                /* :: */Block.simpleVariant("::", [
                    printDirectives(param[/* directives */4]),
                    /* :: */Block.simpleVariant("::", [
                        block(Belt_List.map(param[/* selectionSet */3], printSelection)),
                        /* [] */0
                      ])
                  ])
              ]), " ");
}

function printSelectionSet(set) {
  return block(Belt_List.map(set, printSelection));
}

function printOperationDef(operationDef) {
  var match = operationDef[/* operationType */0];
  var op;
  switch (match) {
    case 0 : 
        op = "query";
        break;
    case 1 : 
        op = "mutation";
        break;
    case 2 : 
        op = "subscription";
        break;
    
  }
  var varDefs = "(" + (printVariables(operationDef[/* variableDefinition */2]) + ")");
  var directives = printDirectives(operationDef[/* directives */3]);
  var selectionSet = block(Belt_List.map(operationDef[/* selectionSet */4], printSelection));
  var exit = 0;
  if (operationDef[/* operationType */0] !== 0 || operationDef[/* name */1] !== undefined || operationDef[/* variableDefinition */2] || operationDef[/* directives */3]) {
    exit = 1;
  } else {
    return selectionSet;
  }
  if (exit === 1) {
    return join(/* :: */Block.simpleVariant("::", [
                  op,
                  /* :: */Block.simpleVariant("::", [
                      join(/* :: */Block.simpleVariant("::", [
                              printOpt(operationDef[/* name */1]),
                              /* :: */Block.simpleVariant("::", [
                                  varDefs,
                                  /* [] */0
                                ])
                            ]), ""),
                      /* :: */Block.simpleVariant("::", [
                          directives,
                          /* :: */Block.simpleVariant("::", [
                              selectionSet,
                              /* [] */0
                            ])
                        ])
                    ])
                ]), " ");
  }
  
}

function printFragmentDef(param) {
  return "fragment " + (param[/* name */0] + (" on " + (param[/* typeCondition */1] + (" " + (wrap("", printDirectives(param[/* directives */3]), " ") + block(Belt_List.map(param[/* selectionSet */2], printSelection)))))));
}

function printDefinition(definition) {
  if (definition.tag) {
    return printFragmentDef(definition[0]);
  } else {
    return printOperationDef(definition[0]);
  }
}

function print(param) {
  return join(Belt_List.map(param[/* definitions */0], printDefinition), "\n\n");
}

exports.join = join;
exports.wrap = wrap;
exports.indent = indent;
exports.block = block;
exports.printValue = printValue;
exports.printObjectFields = printObjectFields;
exports.printObjectField = printObjectField;
exports.printType = printType;
exports.printVariableDef = printVariableDef;
exports.printVariables = printVariables;
exports.printArgument = printArgument;
exports.printArguments = printArguments;
exports.printDirective = printDirective;
exports.printDirectives = printDirectives;
exports.printOpt = printOpt;
exports.printSelectionSet = printSelectionSet;
exports.printSelection = printSelection;
exports.printField = printField;
exports.printAlias = printAlias;
exports.printFragmentSpread = printFragmentSpread;
exports.printInlineFragmentDefinition = printInlineFragmentDefinition;
exports.printOperationDef = printOperationDef;
exports.printFragmentDef = printFragmentDef;
exports.printDefinition = printDefinition;
exports.print = print;
/* Ast-ReasonGraphqlServer Not a pure module */
